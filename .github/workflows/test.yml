name: Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'requirements-dev.txt'
      - 'pyproject.toml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'requirements-dev.txt'
      - 'pyproject.toml'
  workflow_dispatch:

jobs:
  test:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run unit tests
        run: |
          python -m pytest tests/unit/ -v --tb=short

      - name: Run integration tests
        run: |
          python -m pytest tests/integration/ -v --tb=short

      - name: Generate coverage report
        if: matrix.python-version == '3.11'
        run: |
          python -m pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort bandit

      - name: Run flake8
        run: |
          flake8 src/ tests/ --max-line-length=120 --exclude=__pycache__,*.egg-info

      - name: Check black formatting
        run: |
          black --check --diff src/ tests/

      - name: Check import sorting
        run: |
          isort --check-only --diff src/ tests/

      - name: Run security check with bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Upload bandit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

  test-shell-scripts:
    name: Shell Script Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Run shellcheck on scripts
        run: |
          find . -name "*.sh" -exec shellcheck {} +

      - name: Test entrypoint script
        run: |
          chmod +x scripts/entrypoint.sh
          bash -n scripts/entrypoint.sh  # Syntax check
          echo "âœ… Shell scripts passed validation"
