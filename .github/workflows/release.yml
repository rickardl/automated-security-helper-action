name: Release

# Configuration - Easy to change organization/repository
env:
  REGISTRY: ghcr.io
  IMAGE_NAMESPACE: rickardl  # Change to 'aws-actions' when moving to AWS org
  IMAGE_NAME: automated-security-helper-action

# Global permissions for the workflow
permissions:
  contents: write
  packages: write
  actions: read
  attestations: write
  id-token: write

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.get-version.outputs.is-prerelease }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ inputs.tag }}"
          else
            TAG="${{ github.ref_name }}"
          fi

          VERSION="${TAG#v}"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            echo "is-prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "is-prerelease=false" >> "$GITHUB_OUTPUT"
          fi

          echo "Release version: $VERSION"

      - name: Validate semantic versioning
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid semantic version: $VERSION"
            exit 1
          fi
          echo "✅ Valid semantic version: $VERSION"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run tests
        run: python -m pytest tests/ -v

  build-and-publish:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    needs: [validate, test]
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      actions: read

    outputs:
      image-digest: ${{ steps.push.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug information
        run: |
          echo "GitHub Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Registry: ${{ env.REGISTRY }}"
          echo "Image Namespace: ${{ env.IMAGE_NAMESPACE }}"
          echo "Image Name: ${{ env.IMAGE_NAME }}"
          echo "Full Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.validate.outputs.version }}
          labels: |
            org.opencontainers.image.title=AWS Automated Security Helper Action
            org.opencontainers.image.description=Security scanning with AWS ASH v3
            org.opencontainers.image.vendor=AWS
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Refresh Container Registry Authentication
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          platforms: linux/amd64,linux/arm64

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, test, build-and-publish]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"

          if grep -q "## \[${VERSION}\]" CHANGELOG.md; then
            sed -n "/## \[${VERSION}\]/,/## \[/p" CHANGELOG.md | sed '$d' | tail -n +2 > release-notes.md
          else
            cat > release-notes.md << EOF
          ## Release $VERSION

          A GitHub Action for security scanning using AWS Automated Security Helper (ASH) v3.

          See the documentation for usage examples and configuration options.
          EOF
          fi

          # Add Docker image information
          cat >> release-notes.md << EOF

          ### 🐳 Docker Image
          Available as a Docker image:
          \`\`\`
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:${VERSION}
          \`\`\`

          ### 📦 Usage
          \`\`\`yaml
          - uses: ${{ env.IMAGE_NAMESPACE }}/automated-security-helper-action@v$VERSION
          \`\`\`

          ### � Platform Support
          - linux/amd64
          - linux/arm64
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: Release v${{ needs.validate.outputs.version }}
          body_path: release-notes.md
          prerelease: ${{ needs.validate.outputs.is-prerelease }}
          draft: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update major version tag
        if: needs.validate.outputs.is-prerelease == 'false'
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag -f "v${MAJOR_VERSION}" "v${VERSION}"
          git push origin "v${MAJOR_VERSION}" --force

          echo "✅ Updated major version tag v${MAJOR_VERSION} to point to v${VERSION}"
