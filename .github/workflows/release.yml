name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.get-version.outputs.is-prerelease }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ inputs.tag }}"
          else
            TAG="${{ github.ref_name }}"
          fi

          VERSION="${TAG#v}"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            echo "is-prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "is-prerelease=false" >> "$GITHUB_OUTPUT"
          fi

          echo "Release version: $VERSION"

      - name: Validate semantic versioning
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid semantic version: $VERSION"
            exit 1
          fi
          echo "✅ Valid semantic version: $VERSION"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run tests
        run: python -m pytest tests/ -v

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [validate, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: aws-actions/automated-security-helper-action:${{ needs.validate.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          mkdir -p test-release
          echo 'password = "test123"' > test-release/test.py
          docker run --rm \
            -v "$(pwd)/test-release:/workspace" \
            -e GITHUB_WORKSPACE="/workspace" \
            aws-actions/automated-security-helper-action:${{ needs.validate.outputs.version }} \
            "." "security-results" "json" "false" "medium" "false"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, test, build]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"

          if grep -q "## \[${VERSION}\]" CHANGELOG.md; then
            sed -n "/## \[${VERSION}\]/,/## \[/p" CHANGELOG.md | sed '$d' | tail -n +2 > release-notes.md
          else
            cat > release-notes.md << EOF
          ## Release $VERSION

          This release includes various improvements and updates to the AWS Automated Security Helper Action.

          ### Installation
          \`\`\`yaml
          - uses: aws-actions/automated-security-helper-action@v$VERSION
          \`\`\`
          EOF
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: Release v${{ needs.validate.outputs.version }}
          body_path: release-notes.md
          prerelease: ${{ needs.validate.outputs.is-prerelease }}
          draft: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update major version tag
        if: needs.validate.outputs.is-prerelease == 'false'
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag -f "v${MAJOR_VERSION}" "v${VERSION}"
          git push origin "v${MAJOR_VERSION}" --force

          echo "✅ Updated major version tag v${MAJOR_VERSION} to point to v${VERSION}"
